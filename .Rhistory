}
# Define style-specific parameters
if (plot_style == "inverted_Haug") {
background_color <- "black"
plot_background_color <- "black"
text_color <- "white"
axis_color <- "white"
text_field_fill <- "black"  # Inverted text field color
text_field_color <- "white"  # Inverted text field text color
} else if (plot_style == "publication") {
background_color <- "white"
plot_background_color <- "lightgrey"
text_color <- "black"
axis_color <- "black"
text_field_fill <- "white"
text_field_color <- "black"
} else {
background_color <- "white"
plot_background_color <- "white"
text_color <- "black"
axis_color <- "black"
text_field_fill <- "white"
text_field_color <- "black"
}
# Convert column names to symbols for ggplot
x <- rlang::sym(x_col)
y <- rlang::sym(y_col)
# Create the base plot without points first
plot <- ggplot2::ggplot(data, ggplot2::aes(x = !!x, y = !!y))
# Add the light grey rectangle for the "publication" style
if (plot_style == "publication") {
plot <- plot +
ggplot2::geom_rect(aes(xmin = min(data[[x_col]]) + 0.02 * diff(range(data[[x_col]])),
xmax = max(data[[x_col]]) - 0.02 * diff(range(data[[x_col]])),
ymin = min(data[[y_col]]) + 0.02 * diff(range(data[[y_col]])),
ymax = max(data[[y_col]]) - 0.02 * diff(range(data[[y_col]]))),
fill = plot_background_color, color = NA)
}
# Customize the theme
plot <- plot +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = background_color, color = background_color),
plot.background = ggplot2::element_rect(fill = background_color, color = background_color)
)
# Handle heatmaps and contours if enabled and group_col and group_vals are provided
if (!is.null(group_col) && !is.null(group_vals)) {
# Ensure contour_colors has the same length as group_vals or is a single color
if (length(contour_colors) == 1) {
contour_colors <- rep(contour_colors, length(group_vals))
}
for (i in seq_along(group_vals)) {
group_val <- group_vals[i]
# Filter the data for the specified group
group_data <- data %>% dplyr::filter(!!rlang::sym(group_col) == group_val)
# Compute 2D density data for the group with expanded range and higher resolution for smoother contours
x_range_expanded <- range(data[[x_col]]) + c(-0.05, 0.05) * diff(range(data[[x_col]]))
y_range_expanded <- range(data[[y_col]]) + c(-0.05, 0.05) * diff(range(data[[y_col]]))
kde <- MASS::kde2d(group_data[[x_col]], group_data[[y_col]], n = 100,  # Increased n for smoother lines
lims = c(x_range_expanded, y_range_expanded))
kde_df <- data.frame(expand.grid(x = kde$x, y = kde$y), z = as.vector(kde$z))
# Add 2D density heatmap for the group
if (show_heatmaps && (is.null(show_heatmap_for_groups) || group_val %in% show_heatmap_for_groups)) {
plot <- plot +
ggplot2::geom_tile(data = kde_df, ggplot2::aes(x = x, y = y, fill = scales::rescale(z)),
alpha = heatmap_alpha, fill = scales::gradient_n_pal(heatmap_colors[[i]])(scales::rescale(kde_df$z)))
}
# Add contours for the group with adjustable linewidth
if (show_contours && (is.null(show_contours_for_groups) || group_val %in% show_contours_for_groups)) {
plot <- plot +
ggplot2::geom_contour(data = kde_df %>% dplyr::filter(x >= x_range_expanded[1] & x <= x_range_expanded[2] &
y >= y_range_expanded[1] & y <= y_range_expanded[2]),
ggplot2::aes(x = x, y = y, z = z), color = contour_colors[i], size = contour_linewidth)
}
}
}
# Handle convex hulls if enabled and group_col and group_vals are provided
if (!show_heatmaps && !is.null(group_col) && show_hulls && !is.null(group_vals)) {
if (length(group_vals) > 0) {
# Adjust length of hull_fill, hull_color, hull_alpha to match the group_vals
hull_fill <- rep_len(hull_fill, length(group_vals))
hull_color <- rep_len(hull_color, length(group_vals))
hull_alpha <- rep_len(hull_alpha, length(group_vals))
for (i in seq_along(group_vals)) {
group_val <- group_vals[i]
# Check if the hull for the current group should be displayed
if (is.null(show_hull_for_groups) || group_val %in% show_hull_for_groups) {
# Filter the data for the specified group
group_data <- data %>% dplyr::filter(!!rlang::sym(group_col) == group_val)
if (nrow(group_data) > 2) {  # A hull requires at least 3 points
hull_indices <- grDevices::chull(group_data[[x_col]], group_data[[y_col]])
hull_data <- group_data[hull_indices, ]
plot <- plot +
ggplot2::geom_polygon(data = hull_data,
ggplot2::aes_string(x = x_col, y = y_col),
fill = hull_fill[i],
color = hull_color[i],
linetype = hull_linetype,
alpha = hull_alpha[i])
}
}
}
}
}
# Add points for each group separately to ensure correct color and style mapping
if (!is.null(group_col) && !is.null(group_vals)) {
point_color <- rep_len(point_color, length(group_vals))
point_fill <- rep_len(point_fill, length(group_vals))
point_shape <- rep_len(point_shape, length(group_vals))
point_size <- rep_len(point_size, length(group_vals))
for (i in seq_along(group_vals)) {
group_val <- group_vals[i]
group_data <- data %>% dplyr::filter(!!rlang::sym(group_col) == group_val)
# Add the points for the group with the respective aesthetics
plot <- plot +
ggplot2::geom_point(data = group_data,
ggplot2::aes_string(x = x_col, y = y_col),
color = point_color[i],
fill = point_fill[i],
shape = point_shape[i],
size = point_size[i])
}
} else {
# If no groups, just add points without any specific group aesthetic
plot <- plot +
ggplot2::geom_point(ggplot2::aes_string(x = x_col, y = y_col),
color = point_color,
fill = point_fill,
shape = point_shape,
size = point_size)
}
# Get the range of x and y axes
x_range <- range(data[[x_col]], na.rm = TRUE)
y_range <- range(data[[y_col]], na.rm = TRUE)
# Expand the range slightly to prevent points from being cut off
x_expand <- 0.05 * (x_range[2] - x_range[1])  # 5% padding on x-axis
y_expand <- 0.05 * (y_range[2] - y_range[1])  # 5% padding on y-axis
# Generate pretty breaks, excluding the outermost ticks and zero
x_ticks <- pretty(x_range)
y_ticks <- pretty(y_range)
x_ticks <- x_ticks[x_ticks != 0 & x_ticks > x_range[1] & x_ticks < x_range[2]]  # Remove 0 and outermost x-ticks
y_ticks <- y_ticks[y_ticks != 0 & y_ticks > y_range[1] & y_ticks < y_range[2]]  # Remove 0 and outermost y-ticks
# Calculate proportional tick lengths based on a fixed scale
x_tick_length <- tick_length * diff(y_range)  # Consistent tick length on y-scale
y_tick_length <- tick_length * diff(x_range)  # Consistent tick length on x-scale
# Customizing the axes and tick marks with adjustable linewidth
plot <- plot +
ggplot2::theme_minimal(base_family = "sans") +
ggplot2::theme(
panel.grid = ggplot2::element_blank(),  # Remove grid lines
axis.line = ggplot2::element_blank(),  # Hide default axis lines
axis.ticks = ggplot2::element_blank(),  # Remove default ticks
axis.text = ggplot2::element_blank(),   # Remove default tick labels
axis.title.x = ggplot2::element_blank(),  # Hide default x-axis label
axis.title.y = ggplot2::element_blank(),  # Hide default y-axis label
plot.title = ggplot2::element_text(size = title_size, color = text_color),  # Center the title
plot.background = ggplot2::element_rect(fill = background_color, color = background_color),  # Background
plot.margin = ggplot2::margin(tick_margin, tick_margin, tick_margin, tick_margin)  # Margins
)
# Add arrowed x-axis with adjustable linewidth and axis color
plot <- plot +
ggplot2::geom_segment(aes(x = x_range[1] - x_expand, xend = x_range[2] + x_expand,
y = 0, yend = 0),
arrow = grid::arrow(length = grid::unit(0.3, "cm")), color = axis_color, size = axis_linewidth)
# Add arrowed y-axis with adjustable linewidth and axis color
plot <- plot +
ggplot2::geom_segment(aes(y = y_range[1] - y_expand, yend = y_range[2] + y_expand,
x = 0, xend = 0),
arrow = grid::arrow(length = grid::unit(0.3, "cm")), color = axis_color, size = axis_linewidth)
# Add custom tick marks on the x-axis with adjustable linewidth
plot <- plot +
ggplot2::geom_segment(data = data.frame(x = x_ticks),
ggplot2::aes(x = x, xend = x, y = -x_tick_length, yend = x_tick_length),
color = axis_color, size = axis_linewidth)
# Add custom tick marks on the y-axis with adjustable linewidth
plot <- plot +
ggplot2::geom_segment(data = data.frame(y = y_ticks),
ggplot2::aes(y = y, yend = y, x = -y_tick_length, xend = y_tick_length),
color = axis_color, size = axis_linewidth)
# Adjust position of tick labels for x-axis based on tick_length
plot <- plot +
ggplot2::geom_text(data = data.frame(x = x_ticks, y = 0),
ggplot2::aes(x = x, y = y, label = x),
vjust = 1.5 + tick_length * 50,  # Adjust tick label position based on tick_length
size = tick_size / 3, color = text_color)  # Position tick labels below the x-axis and adjust size
# Adjust position of tick labels for y-axis based on tick_length
plot <- plot +
ggplot2::geom_text(data = data.frame(x = 0, y = y_ticks),
ggplot2::aes(x = x, y = y, label = y),
hjust = 1.5 + tick_length * 50,  # Adjust tick label position based on tick_length
size = tick_size / 3, color = text_color)  # Position tick labels to the right of the y-axis and adjust size
# Add titles and axis labels using labs (after all other layers)
plot <- plot + ggplot2::labs(title = title)
# Add custom axis labels with optional black borders (like text fields)
if (show_label_text_fields) {
# Replace geom_label for x-axis and y-axis labels with annotate
plot <- plot +
ggplot2::annotate("text", x = max(x_range) + x_expand + x_label_adjust_x,
y = -0.05 * diff(y_range) + x_label_adjust_y,
label = x_label, size = x_label_size, color = text_color) +
ggplot2::annotate("text", x = -0.02 * diff(x_range) - y_label_adjust_x,
y = max(y_range) + y_expand + y_label_adjust_y,
label = y_label, size = y_label_size, color = text_color, angle = ifelse(rotate_y_label, 90, 0))
} else {
plot <- plot +
ggplot2::annotate("text", x = max(x_range) + x_expand + x_label_adjust_x,
y = -0.05 * diff(y_range) + x_label_adjust_y,
label = x_label, size = x_label_size, color = text_color) +
ggplot2::annotate("text", x = -0.02 * diff(x_range) - y_label_adjust_x, y = max(y_range) + y_expand + y_label_adjust_y,
label = y_label, size = y_label_size, color = text_color, angle = ifelse(rotate_y_label, 90, 0))
}
return(plot)
}
library(roxygen2)
library(devtools)
roxygen2::roxygenise()
library(devtools)
library(HaugShape)
library(readxl)
library(ggplot2)
library(dplyr)
library(rlang)
library(MASS)
library(grDevices)
library(grid)
library(scales)
library(patchwork)
library(RColorBrewer)
library(Momocs)
beykan_df <- read_xlsx("Beykan_PC_scores.xlsx",sheet = 1)
setwd("G:/Meine Ablage/01_LMU/Hiwi-Job/15_Beykan")
beykan_df <- read_xlsx("Beykan_PC_scores.xlsx",sheet = 1)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 0.5)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 0.5)
Haug_overview(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"))
Haug_panel(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"))
lf_shapes <- list.files("G:/Meine Ablage/01_LMU/Hiwi-Job/15_Beykan/Beykan_Shapes/02_Jpgs", full.names = TRUE)
shapes <- import_jpg(lf_shapes) %>% Out() #import coordinates and convert to Coo object
shapes %>% coo_center %>% coo_scale %>%
coo_slidedirection("up")
shape_efourier <- efourier(shapes, norm = TRUE)
shape_pca <- PCA(shape_efourier)
shape_plot_momocs(shape_pca,shapes,shape_size = 0.0002, shift_distance = 0.06, horizontal_offset = -0.02, vertical_offset = -0.05, x_label = "PC1", y_label = "PC2", y_label_adjust = 0.034, x_label_adjust = 0.02,arrow_shift = 0.03, title = "PC1_PC2 Plot based on Momocs")
setwd("G:/Meine Ablage/01_LMU/4. Semester/01_Master/04_Analysis")
#Load Head shapes
lf_H <- list.files("G:/Meine Ablage/01_LMU/4. Semester/01_Master/04_Analysis/08_Heads_ext_fos", full.names = TRUE)
lf_H
H <- import_jpg(lf_H) %>% Out() #import coordinates and convert to Coo object
Haug_overview(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"))
shape_plot_momocs(shape_pca,shapes,
shape_size = 0.0002,
shift_distance = 0.06,
horizontal_offset = -0.02,
vertical_offset = -0.05,
x_label = "PC1",
y_label = "PC2",
y_label_adjust = 0.034,
x_label_adjust = 0.02,
arrow_shift = 0.03,
title = "PC1_PC2 Plot based on Momocs")
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 0.5)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "inverted_Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 0.5)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "publication",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 0.5)
?shape_plot()
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "publication",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = TRUE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "publication",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
library(roxygen2)
document()
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "publication",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
shape_plot(beykan_df, "PC1", "PC2", "Group")
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("01_old"))
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("01_old","02_new"))
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new"))
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new"),
show_hulls = TRUE, show_hull_for_groups = "01_old")
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new"),
show_hulls = TRUE, show_hull_for_groups = "02_new")
shape_plot(beykan_df, "PC1", "PC2", "Group",
show_hulls = TRUE)
shape_plot(beykan_df, "PC1", "PC2", "Group",
show_hulls = TRUE, show_hull_for_groups = "02_new")
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new","01_old"),
show_hulls = TRUE, show_hull_for_groups = "02_new", )
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new","01_old"),
show_hulls = TRUE, show_hull_for_groups = "01_old" )
View(beykan_df)
shape_plot(beykan_df, "PC1", "PC2", "Group", group_vals = c("02_new","01_old"),
show_hulls = TRUE, show_hull_for_groups = c("02_new","01_old") )
#plots
#plot1: basic PC1 PC2 plot for head shapes including fossils (grouped by epoch)
ants_plot1 <- ants %>%
dplyr::filter(is.finite(H_PC1) & is.finite(H_PC2))
shape_plot(ants_plot1,x_col = "H_PC1", y_col = "H_PC2", group_col = "Group1", group_vals = c("cre","eoc","mio","ext"), #groups
point_shape = c(21,22,24,8), point_fill = c("black","darkgrey","grey","white"), #points
show_hulls = TRUE, hull_fill = c("white","white","white","blue"), hull_color = c("black","darkred","darkgreen","blue"), show_hull_for_groups = c("cre","eoc","mio","ext"), #hulls
rotate_y_label = FALSE, title = "PC1 vs. PC2 plot (n = 824; 83.9% total)", x_label = "PC1 (75.9%)", y_label = "PC2 (8.0%)", y_label_adjust_x = 15, #label adjustments
plot_style = "Haug" #style
)
setwd("G:/Meine Ablage/01_LMU/4. Semester/01_Master/04_Analysis")
#Import main data frame
ants <- read_xlsx("Data_AntShape.xlsx",sheet = 2)
#plots
#plot1: basic PC1 PC2 plot for head shapes including fossils (grouped by epoch)
ants_plot1 <- ants %>%
dplyr::filter(is.finite(H_PC1) & is.finite(H_PC2))
shape_plot(ants_plot1,x_col = "H_PC1", y_col = "H_PC2", group_col = "Group1", group_vals = c("cre","eoc","mio","ext"), #groups
point_shape = c(21,22,24,8), point_fill = c("black","darkgrey","grey","white"), #points
show_hulls = TRUE, hull_fill = c("white","white","white","blue"), hull_color = c("black","darkred","darkgreen","blue"), show_hull_for_groups = c("cre","eoc","mio","ext"), #hulls
rotate_y_label = FALSE, title = "PC1 vs. PC2 plot (n = 824; 83.9% total)", x_label = "PC1 (75.9%)", y_label = "PC2 (8.0%)", y_label_adjust_x = 15, #label adjustments
plot_style = "Haug" #style
)
#plot1_5: basic PC1 PC2 plot for head shapes including fossils (grouped by epoch)
shape_plot(ants_plot1,x_col = "H_PC1", y_col = "H_PC3", group_col = "Group1", group_vals = c("cre","eoc","mio","ext"), #groups
point_shape = c(21,22,24,8), point_fill = c("black","darkgrey","grey","white"), #points
show_hulls = TRUE, hull_fill = c("black","darkred","darkgreen","blue"), hull_color = c("black","darkred","darkgreen","blue"), show_hull_for_groups = c("cre","eoc","mio","ext"), #hulls
rotate_y_label = FALSE, title = "PC1 vs. PC3 plot (n = 824; 82.3% total)", x_label = "PC1 (75.9%)", y_label = "PC3 (6.4%)", y_label_adjust_x = 15, #label adjustments
plot_style = "Haug" #style
)
#Create a data frame
df <- data.frame(
PC1 = rnorm(100),
PC2 = rnorm(100),
group = sample(c("A", "B", "C"), 100, replace = TRUE))
devtools::install_github("TestoKlaus/HaugShape")
detach("package:HaugShape", unload = TRUE)
devtools::install_github("TestoKlaus/HaugShape")
devtools::install_github("TestoKlaus/HaugShape")
library(HaugShape)
remove.packages("HaugShape")
devtools::install_github("TestoKlaus/HaugShape")
library(HaugShape)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
library(HaugShape)
devtools::install_github("TestoKlaus/HaugShape")
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
library(HaugShape)
shape_plot(beykan_df,"PC1","PC2","Group", group_vals = c("01_old","02_new"), point_shape = c(21,8), point_size = c(2,3), point_color = c("red","black"), point_fill = "black",
show_hulls = FALSE, hull_fill = c("red","blue"), show_hull_for_groups = c("01_old","02_new"),
show_heatmaps = FALSE, show_heatmap_for_groups = "02_new",
show_contours = FALSE, show_contours_for_groups = c("02_new"), contour_colors = c("red","blue"),
plot_style = "Haug",
x_label = "PC1 (47.7%)",
y_label = "PC2 (21.9%)",
y_label_adjust_x = -0.015,
y_label_adjust_y = 0.015,
x_label_adjust_x = 0,
rotate_y_label = FALSE,
show_label_text_fields = TRUE,
axis_linewidth = 1)
setwd("G:/Meine Ablage/01_LMU/Hiwi-Job/15_Beykan")
remove.packages(HaugShape)
remove.packages(""HaugShape")
remove.packages("HaugShape")
devtools::install_github("TestoKlaus/HaugShape")
library(HaugShape)
devtools::install_github("TestoKlaus/HaugShape")
devtools::build()
install.packages("G:/Meine Ablage/01_LMU/4. Semester/01_Master/04_Analysis/HaugShape_0.1.1.tar.gz", repos = NULL, type = "source")
library(HaugShape)
install.packages("G:/Meine Ablage/01_LMU/4. Semester/03_R_Package_Shape_Analysis/HaugShape_0.1.1.tar.gz", repos = NULL, type = "source")
library(HaugShape)
library(roxygen2)
document()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(devtools)
devtools::install_github("TestoKlaus/HaugShape")
devtools::install_github("TestoKlaus/HaugShape")
devtools::document()
devtools::install_github("TestoKlaus/HaugShape")
library(HaugShape)
install.packages(c("utf8", "glue", "cli", "vctrs", "rlang", "fansi", "Rcpp", "colorspace", "dplyr"))
install.packages(c("utf8", "glue", "cli", "vctrs", "rlang", "fansi", "Rcpp", "colorspace", "dplyr"))
devtools::install_github("TestoKlaus/HaugShape")
library(HaugShape)
devtools::install_github("TestoKlaus/HaugShape", INSTALL_opts = "--no-lazy")
install.packages("G:/Meine Ablage/01_LMU/4. Semester/03_R_Package_Shape_Analysis/HaugShape_0.1.1.tar.gz", repos = NULL, type = "source", INSTALL_opts = "--no-lazy")
remove.packages("HaugShape")
remove.packages("HaugShape")
devtools::install_github("TestoKlaus/HaugShape")
